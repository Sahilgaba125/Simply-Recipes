/* Typography Styles at the Top */
*,
::after,
::before {
  box-sizing: border-box;
}
/* fonts */

@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;600&family=Montserrat&family=Nunito:wght@400&display=swap');
html {
  font-size: 100%; /* only imported 400 for nunito , as has used it as body font weight VS 3 for roboto, because its heading and its needed.
} 
:root {
  /* Fonts */
  --headingFont: 'Roboto', sans-serif;
  --bodyFont: 'Nunito', sans-serif;

  /* Basic Colors */
  --backgroundColor: #f1f5f9; /* Light background */
  --textColor: #0f172a; /* Dark text */
 
  /* Image/Button basics */
  --borderRadius: 0.25rem;
  --primaryColor: #645cff; /* Main button and highlights */
  --buttonTextColor: #fff; /* White text for buttons */
  --transition: 0.3s ease-in-out all;

    /* box shadow*/
  --shadow-1: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
  --shadow-2: 0 4px 6px -1px rgba(0, 0, 0, 0.1),
    0 2px 4px -1px rgba(0, 0, 0, 0.06);
  --shadow-3: 0 10px 15px -3px rgba(0, 0, 0, 0.1),
    0 4px 6px -2px rgba(0, 0, 0, 0.05);
  --shadow-4: 0 20px 25px -5px rgba(0, 0, 0, 0.1),
    0 10px 10px -5px rgba(0, 0, 0, 0.04);
   
    /* Rest of colors */
  --primary-100: #e2e0ff;
  --primary-200: #c1beff;
  --primary-300: #a29dff;
  --primary-400: #837dff;
  --primary-500: #645cff;
  --primary-600: #504acc;
  --primary-700: #3c3799;
  --primary-800: #282566;
  --primary-900: #141233;

    /* grey */
    --grey-50:  #f8fafc;
    --grey-100: #f1f5f9;
    --grey-200: #e2e8f0;
    --grey-300: #cbd5e1;
    --grey-400: #94a3b8;
    --grey-500: #64748b;
    --grey-600: #475569;
    --grey-700: #334155;
    --grey-800: #1e293b;
    --grey-900: #0f172a;
}

html, body {
  background-color: var(--backgroundColor);
  font-family: var(--bodyFont);
  color: var(--textColor);
  font-weight: 400;
  line-height: 1.75; /*for readability and comfort when reading long text. */
  margin: 0;
  padding: 0;
  min-height: 100vh;
  overflow-x: hidden;  /* Prevent horizontal scrolling */
  opacity: 1;
  animation: bodyFadeIn 0.3s ease-in-out forwards;
}
/* Keyframes for fade in and fade out */
@keyframes bodyFadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes bodyFadeOut {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}
@media (min-width: 768px) {
  html, body {
    animation: none !important;
  }
}
 p {
  margin-bottom: 1.5rem;
  max-width: 40em; /*Limits the width of the paragraph text for better readability on larger screens, ensuring lines aren't too long. */
}
 a {
  color: #0f172a;
  text-decoration: none;
  margin-bottom: 1.5rem;
}

h1, h2, h3, h4, h5 {
  font-family: var(--headingFont);
  margin-bottom: 1.38rem;
  font-weight: 400; 
  text-transform: capitalize; /* make first letter capital */
  line-height: 1.3;
}

h1 {
  font-size: 3rem;
}

h2 {
  font-size: 2.44rem;
}
h3{
  font-size: 1.95rem;
}

h4 {
  font-size: 1.56rem;
}

h5 {
  font-size: 1.25rem;
}
.img {
  border-radius: var(--borderRadius);
  width: 100%;
  object-fit: cover;
  display: block;
}
.contact-btn {
  background-color: var(--primaryColor);
  color: var(--buttonTextColor);
  padding: 0.5rem 1rem;
  border: none;
  border-radius: var(--borderRadius);
  cursor: pointer;
  transition: var(--transition); 
  font-size: 1rem;
  cursor: pointer;
}
.contact-btn:hover {
  background: var(--primary-700);
  box-shadow : var(--shadow-3);
  transform: translateY(1px);
}


/* Nav/Header */
.header {
  display: flex;
  align-items: center;
  justify-content: center;
  position: fixed;
  top: 0;
  z-index: 1000; /* Ensures it stays on top */
  background-color: var(--backgroundColor); /* so it doesnt take wrapper content as background */
  box-shadow: var(--shadow-1); /* Adds a subtle shadow for clarity */
  width: 100%; /*  to ensure it stretches across the viewport instead of wrapping around its content. */
}

.nav-wrapper {
  width: 90vw;
  max-width: 1120px; 
}

.nav-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  height: 6rem;
}
a{
  margin-bottom:0;
}

.nav-header img {
  width:12.5rem;
}

.hamburger-menu {
  padding: 0.15rem 0.75rem;
  background-color: var(--primaryColor);
  color: var(--buttonTextColor); /* You may or may not need text color, depending on your design */
  border: none;
  border-radius: var(--borderRadius);
  cursor: pointer;
}
.hamburger-menu i{
  font-size: 1.5rem;
}

.nav-links {
  display: none; /* Hidden on mobile */
  flex-direction: column;
 /*  position: static; for more stable behavior. */
  left: 0;
  width: 100%;
  background-color: var(--backgroundColor);
  transition: var(--transition);
}

.show-links {
  display: flex; /* or block, depending on how you want to display it */
  height: 23.9375rem;
}

.nav-link {
  padding: 1rem;
  text-align: center;
  border-bottom: 2px solid black;
  transition: var(--transition);
  text-transform: capitalize;
  transition: all 0.3s ease;
}
.nav-link:hover {
  color: var(--primary-500);
  transform: scale(1.1);
}

/* Submenu styles */
.submenu-links {
  display: none;
  background-color: var(--lightGrayColor);
}

.submenu.show-submenu .submenu-links {
  display: flex; /* Show submenu on toggle */
  justify-content: space-evenly;
}



/* Header on desktop */
@media screen and (min-width: 768px) {
  .header {
    height: 6rem;
    padding:2rem;
  }
  .nav-wrapper{
    display: flex;
    flex-direction: row;
  }
  .nav-links {
    display: flex;
    flex-direction: row;
    position: static;
    width: 100%;
    margin-top: 2rem;
    margin-left:2rem;
  }

  .nav-link {
    padding: 0;
    margin-right: 1rem;
    border-bottom: none;
  }

 .contact-link {
    margin-left: auto;
    margin-right:0;
  }

  .hamburger-menu {
    display: none; /* Hide hamburger menu on desktop */
  }
  .submenu{
    position: relative;
  }
  .submenu-links {
    position: absolute;
    display: block;
    
    top: 25px;
    left: 0;
    background-color: gray;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    visibility: hidden;
    opacity: 0;
    transform: translate(-5px);
    transition: all .3s ease-in-out;
  }
  .submenu:hover .submenu-links{
  
    z-index: 1000;
    padding: 1rem;
    visibility: visible;
    opacity: 1;

    transform: translate(0px);
  }
  .submenu-links a {
    display: block; /* Each link takes up a whole line */
    padding: 0.5rem 1rem; /* Add padding for better spacing */
    text-align: left; /* Optional: Align text */
    

  }
  
  .submenu-links a:hover {
    background-color: var(--primaryColor); /* Highlight background on hover */
    color: white; /* Change text color on hover */
  }
}
/* Wrappers */

/* Main */
.wrapper {
  max-width: 1120px; /* Both properties help create a balance between responsiveness on small screens (with 90vw) and a fixed, manageable 
  size on larger screens (with 1120px as the cap). This approach is often used to control content width on both mobile and desktop. */
  width:90vw;
  margin: 0 auto;
  padding-top: 7rem;
  min-height: calc(100vh - (6rem + 4rem)); 
}

.main-hero {
  position: relative;
  height: 40vh;
  margin: 0 auto;
  border-radius: 0.25rem;
  margin-bottom: 2rem;
  overflow: hidden;
  background: none;
}

.hero-container {
  position: relative;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
}

.hero-image {
  position: absolute;
  top: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 1s ease-in-out;
  filter: blur(2px) brightness(0.8);
}

/* Initial positioning of images */
.hero-image:nth-child(3) { transform: translateX(200%); }
.hero-image:nth-child(4) { transform: translateX(300%); }
.hero-image:nth-child(5) { transform: translateX(400%); }

.hero-text {
  position: relative;
  color: white;
  z-index: 1;
  text-align: center;
  font-size: 1.5rem;
  animation: fadeIn 1.5s ease-in-out; 
}
@keyframes fadeIn {
  0% {
    opacity: 0;
    transform: translateY(20px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}


.left-arrow-container, .right-arrow-container {
  position: absolute;
  top: 0;
  height: 100%;
  width: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: rgba(0, 0, 0, 0.2);
  cursor: pointer;
}

.left-arrow-container { left: 0; }
.right-arrow-container { right: 0; }

.left-arrow, .right-arrow {
  font-size: 2rem;
  color: white;
}

/* index Main section */
.main {
  display: grid;
  gap: 2rem 1rem;
  margin-bottom: 2rem;
}
.images {
  display: grid; 
  row-gap: 2rem;
}
.recipe {
  display: block; /*  if the anchor tag already contains an image and the image naturally takes up the space you want to be clickable, then
  you might not need display: block;. But adding it ensures that even empty space around the image within the anchor tag will also be clickable.*/
  opacity: 0;
  transform: translateX(100px);
  animation: fadeSlide 1.5s ease-out forwards;
  visibility: hidden;
  animation-play-state: paused; /* Pause animation by default */
}
/* Animation triggered by adding the .animate class */
/* Triggered when the element enters the viewport */
.recipe.animate {
  opacity: 1;
  transform: translateX(0);
  visibility: visible;
  animation-delay: 0.2s; /* Stagger the animations */
  animation-play-state: running;
}
/* Keyframes for fade and slide effect */
@keyframes fadeSlide {
  from {
     opacity: 0;
     transform: translateX(100px);
  }
  to {
     opacity: 1;
     transform: translateX(0);
  }
}
.recipe-img {
  height: 15rem;
  margin: 0;
  margin-bottom: 0.5rem; 
  padding: 0;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2), 
  0 6px 20px rgba(0, 0, 0, 0.19); /* Dual shadows for added depth */
  transition: scale 0.3s ease-in-out;

}
.recipe-img:hover{
  transform: scale(1.05);
}

.recipe h5 {
  margin-bottom: 0;
  margin-top: 0.25rem;
  color: var(--grey-700);
  line-height: 1;
}
.recipe p {
  margin-bottom: 0; /* Because in global styling, all p are given margin-bottom=1.5rem */
  margin-top: 0.5rem;
  line-height: 1;
  color: var(--grey-500);
  letter-spacing: var(--letterSpacing);
}
.recipes {
 order:1; /* By default, all elements have an order value of 0. If you assign order: 1 to an element, it will move after elements with 
  order: 0. Similarly, order: 2 will place the element further down. +++++ Also, If .recipes is inside a grid container, it can still be reordered using order without explicitly
   setting display: flex on .recipes. */ 
  margin-top: 1rem;
}
.recipes h4{
  font-weight: 500;
  margin-bottom: 0.8rem;
}
.tags-list {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  column-gap: 0.5rem;
}
.tags-list a{
  color: var(--grey-500); 
  transition: var(--transition); /* So all a links , which look like button gets this smoothness */
}
.tags-list a:hover{
  color: var(--primary-500);
}

/* Images Section */

/* wrapper-Media queries */
@media screen and (min-width: 576px) {
  .images{
    grid-template-columns: 1fr 1fr;
    gap: 2rem 0.8rem;
   }
   
   .recipe-img{
    height: 10rem;
   }
}
@media screen and (min-width: 992px) {
  .main{
    grid-template-columns: 200px 1fr; /* so second column takes up all the remaining space */
    gap:0.5rem;
  } 
  .hero-text h1{
    font-size: 5rem;
  }
  .main .recipes{
    order:0;
    margin-right: 4rem;
    margin-top:0;
 }
  .tags-list {
    display: flex;
    flex-direction: column;
   }
  .images {
    grid-template-columns: repeat(2, 1fr); /* Three columns on desktop */
  }
   .recipes h4 {
    margin-top: 0; /* because by default for bigger screens, margin-block-start is applied from browsers */
  }
}
@media (min-width: 1200px){
  .images 
  {grid-template-columns : repeat(3, 1fr); /* Three columns on desktop */
}
}

/* About-wrapper */
.about-hero{
  position: relative
}
.about-hero img {
  height: 19rem;
  width: 100%;
  object-fit: cover;
  border-radius: 0.25rem;
  display: block;
  margin-top: 2rem;
}
.about-hero-text h2{
  font-weight: bold;
}
.bouncing-arrow {
  position: absolute;
  bottom: 20px;
  left: 50%;
  transform: translateX(-50%);
  font-size: 24px;
  color: #333;
  animation: bounce 1.5s infinite;
  z-index: 100;
}

@keyframes bounce {
  0%, 100% {
     transform: translateY(0);
  }
  50% {
     transform: translateY(-10px);
  }
}

.featured-recipes {
  margin-bottom: 2rem;
}
.featured-recipes >h5 {
   text-align: center; /*increases specificity by selecting only the direct child of an element, rather than all descendants. */
}
@media (min-width: 768px){
  .about-hero, .recipe-hero{
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap:2rem;
  }
   }
/* contact page */
.wrapper .contact-hero .contact-form{
   background-color: white;
   width:100%;
   padding:0.5rem 1rem;
   border-radius: var(--borderRadius);
   box-shadow:  0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);;
   margin-bottom: 2rem;
}
.form-row {
  display: flex;
  flex-direction: column;
  margin: 2rem 0;
}
.form-input, .form-textarea{
  background-color: var(--backgroundColor);
  border: 2px solid var(--grey-300);
  padding: 0.375rem 0.75rem;
  resize: none; /* Prevents resizing of the textarea */
  transition: border-color 0.3s ease, box-shadow 0.3s ease;
  border-radius: var(--borderRadius);
}
.form-input:focus ,
.form-textarea:focus {
  border-color: var(--primaryColor);
  box-shadow: 0 0 5px rgba(100, 92, 255, 0.5);
}


.btn-block{
  width: 100%;
}
/* Pulsing animation */
.pulsing-icon {
  animation: pulse 1.5s infinite;
  font-size: 1.5rem;
  
}

@keyframes pulse {
  0% {
    transform: scale(1);
    opacity: 1;
  }
  50% {
    transform: scale(1.2);
    opacity: 0.7;
  }
  100% {
    transform: scale(1);
    opacity: 1;
  }
}

@media (min-width: 768px){
  .wrapper .contact-hero{
    display: grid;
    grid-template-columns: 1fr 450px;
    gap:5rem;
  }
  .contact-form {
     /* min-width:30rem;
      max-width: 40%;  He used */
     max-width:37.5rem;  width: 90vw; 
  }
}

/* Tags Page */
.tags-wrapper{
  display: grid;
  margin: 0 auto;
  row-gap: 2rem;
}

.tag {
  background-color: #64748b;
  border-radius: var(--borderRadius);
  padding: 1rem 0;
  transition: var(--transition);
}
.tag:hover {
  background: var(--primary-500);
  animation: glow 1s infinite alternate;
}
@keyframes glow {
  0% {
    box-shadow: 0 0 5px #1c7531;
  }
  100% {
    box-shadow: 0 0 200px #2ba021;
  }
}


.tag h5, .tag p {
color: white; /*the , in CSS separates distinct selectors. So without, .tag p--> It would select h5 from .tag but all p, not just this one.
can also use .tag > *     */
text-align: center;
margin: 0;
}

@media (min-width: 768px){
  .tags-wrapper{
    grid-template-columns: repeat(2, 1fr); /* Three columns on desktop */
    column-gap: 2rem;
   }
  }
@media (min-width: 1200px) {
  .tags-wrapper{
    grid-template-columns: repeat(3, 1fr); /* Three columns on desktop */
  }
}

/* Recipe Page */
.recipe-hero{
  display: grid;
}
.recipe-hero-img{
  height: 300px;
  }
.recipe-icons{
  display: grid;
  grid-template-columns:  repeat(3, 1fr);
  margin-bottom: 2rem;
  margin-top: 2rem;
  text-align: center; /* text-align is an inherited property, meaning that child elements (such as <h5> and <p>)
   will automatically inherit the text alignment of their parent, as long as parent is a block level element unless they have a specific alignment set. */
}

.recipe-icons article > * {
  margin-top: 0;
  margin-bottom: 0;
  
}
.recipe-icons i {
 color : #645cff;
}
.recipe-tags{
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
}
.recipe-tags a {
 
  background-color: #645cff;
  border-radius: 0.25rem;
  padding: 0.05rem 0.5rem ;
  color: white;

}
.recipe-section{
  display: grid;
}
.step{
  display: grid;
    grid-template-columns: auto 1fr;
    align-items: center;
    gap:1.5rem;
}
.step div {
  height: 2px;
  background: var(--grey-300);


}
.step p{
  color: var(--primary-500)
}
.second-column p{
  border-bottom: 1px solid gray;
  margin-bottom: 1.5rem;
  padding-bottom: 1rem;
}
.tools p{
  color: var(--primary-500);
}
@media (min-width: 768px){
  .recipe-hero{
    grid-template-columns: 4fr 5fr;
    gap: 4rem;
    align-items: center;
  }
  .recipe-hero-img{
    height: 300px;
  }
  
  .recipe-section{
    grid-template-columns: 2fr 1fr;
    gap: 2rem;
  }
 
}
/* Footer */
.footer {
  background-color: #1f2937;
  height: 4rem;
  padding: 1.2rem;
  text-align: center;
}
.footer p {
  color: #e2e8f0;
}
.additional-info{
  margin-bottom: 2rem;
}

/* General dropdown container styling */
.dropdown {
  position: relative;
  display: inline-block;
  margin-right: 20px; /* Space between dropdowns */
  margin-bottom: 10rem;
}
.dropdown-right{
  float: right;
}

/* Dropdown content hidden by default */
.dropdown-content {
  display: none;
  position: absolute;
  min-width: 160px;
  box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2); /* Instead of using a border, box-shadow property to make 
  the dropdown menu look like a "card". */
  z-index: 1;
}

/* Dropdown content links */
.dropdown-content a {
  padding: 8px 12px;
  display: block;
}

/* Show dropdown content on hover */
.dropdown:hover .dropdown-content {
  display: block;
}
.dropdown-content a:hover {
  background-color: lightgrey;
}

.dropdown-container {
  position: relative;
  max-width: 200px;
}

.dropdown-toggle {
  padding: 0.5rem 1rem;
  border: 1px solid #ccc;
  cursor: pointer;
}

/*.submenu {
  position: absolute;
  top: 100%;
  left: 0;
  width: 100%;
  background-color: #fff;
  border: 1px solid #ccc;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  z-index: 10;
  padding: 1rem;
}

/* 1. Display: none/block (Simple Approach) */
.display-style {
  display: none;
  transform: translateY(-1000px);
  transition: transform 0.3s ease; /* Entry animation */
}

.display-style.show {
  display: block; /* Show */
  transform: translateY(0); /* Slide to position */
}

/* 2. Visibility + Opacity (Smooth Fade-In/Fade-Out) */
.visibility-style {
  visibility: hidden;
  opacity: 0;
  transform: translateY(-10px);
  transition: opacity 0.3s ease, transform 0.3s ease;
}

.visibility-style.show {
  visibility: visible;
  opacity: 1;
  transform: translateY(0);
}







.modal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  justify-content: center;
  align-items: center;
  opacity: 0;
  visibility: hidden;
  transition: opacity 0.3s ease, visibility 0.3s ease;
}
.modal.show {
  display: flex;
  opacity: 1;
  visibility: visible;
}
.modal-content {
  background-color: var(--backgroundColor);
  padding: 1.5rem;
  border-radius: var(--borderRadius);
  box-shadow: var(--shadow-3);
}
.close-modal-btn {
  font-size: 1.5rem;
  cursor: pointer;
  float: right;
}




/* this doesnt work 1. if child-width not defined 2. if remove display:flex from parent, 
    then it becomes its default-inline, where it doesnt work unless add display:block, as p/img is inline .
    in short=will only work correctly if the child is a block-level element with a specified width, and to make an inline elemetnt to block
    level need to add display:block,*/
  
  /* Can also use simple , Width: 25% in div for fixed space. The calc(25% - 1rem) function in CSS allows you to dynamically calculate the width of your image containers based on the available space.
   This means you can adjust how many images you want per row by changing the percentage value. For example, if you want three images per row,
    you could use calc(33.33% - 1rem). 
  
    This will make the main section stretch dynamically between the header and footer.
    body {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
  }
  
  main {
    flex-grow: 1; /* Main takes the remaining height 
    display: flex;
    flex-direction: column;
  }  */
  /*The .images .recipe img style still uses height: 10rem; and width: 100%; with object-fit: cover;, which maintains responsiveness.
  The .recipe container remains with its max-width: 15rem;, so images should maintain their layout and size on larger screens.
  